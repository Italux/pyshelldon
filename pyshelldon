#!/usr/bin/env python
# encoding: utf-8
"""
@file    	pyshelldon

@author		Italo Santos 
@date		2012-02-08
"""

import os
import sys
import syslog
import readline
import subprocess
import ConfigParser

VERSION = "0.2"
CONFIG = "commands.conf"
PROG_NAME = "pyshelldon"
HOSTNAME = os.uname()[1]
USER = os.getlogin()

class stdcolor:
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    RED = '\033[91m'
    END = '\033[0m'

class autocomplete:
	
    def __init__(self):
		config = ConfigParser.ConfigParser()
		config.read(CONFIG)
		self.words = config.options("commands")
		self.prefix = None
	
    def complete(self, prefix, index):
        if prefix != self.prefix:
            self.matching_words = [w for w in self.words if w.startswith(prefix)]
            self.prefix = prefix
        else:
            pass
        try:
            return self.matching_words[index]
        except IndexError:
            return None
	

def log(program, message):
	syslog.openlog(program)
	syslog.syslog(syslog.LOG_DAEMON | syslog.LOG_NOTICE, message)
	syslog.closelog()

def help():
	
	print "\nCommand Help\nUsage:\n" + stdcolor.BOLD + "\t\"?\" or \"h\" or \"help" + stdcolor.END +  " - " + stdcolor.UNDERLINE + "Print command help\n" + stdcolor.END
	
	config = ConfigParser.ConfigParser()
	config.read(CONFIG)
	config = config.items("help")
	for c in sorted(config):
		print stdcolor.BOLD + "\t%s" % c[0] + stdcolor.END + " - %s" % c[1]
	print ""

def do_cmd(command):
	
	if command == "":
	    return False
	else:
	    command = command.split()
  
	try:
		if command[0] == "help" or command[0] == "h" or command[0] == "?":
			help()
			log( PROG_NAME, "%s - %s: %s for help command" % (USER, PROG_NAME, command[0]) )
		elif command[0] == "exit":
		    sys.exit(0)
		else:
			config = ConfigParser.ConfigParser()
			config.read(CONFIG)
			cmd = config.get("commands", command[0])
			if len(command) > 1:
			    os.system(cmd % tuple(command[1:]))
			else:
			    if "%s" in cmd:
			        print "-%s: %s: missing arguments" % (PROG_NAME, command[0])
			    else:
			        os.system(cmd)
			log( PROG_NAME, "%s: %s: %s -> %s: %s%s" % (USER, PROG_NAME, " ".join(command), os.getenv("SHELL"), cmd.split("%s")[0], " ".join(command[1:])) )
	except Exception, e:
	    print "-%s: %s: command not found\nUse \"help\" to list all commands available" % (PROG_NAME, command[0])

def main():

    readline.parse_and_bind("tab: complete")
    complete = autocomplete()
    readline.set_completer(complete.complete)
    command = raw_input("%s:~ %s %s > " % (HOSTNAME, USER, PROG_NAME))
    do_cmd(command)

if __name__ == "__main__":

	os.system("clear")
	log( PROG_NAME, "%s: Logged in" % USER )
	print stdcolor.BOLD + "\nFor HELP commands try: \"?\" or \"h\" or \"help\"\n" + stdcolor.END
	while True:
		try:
		    os.path.isfile(CONFIG)
		    main()
		except KeyboardInterrupt:
			print ""
		except EOFError:
			print "\
logout"
			log(PROG_NAME, "%s: Logged out" % USER)
			sys.exit(0)
		except Exception, e:
		    print "Can't load commands config file!"
		    log( PROG_NAME, "Can't load commands config file!" )
		    log( PROG_NAME, "User: %s Logged out" % USER )
		    sys.exit(1)